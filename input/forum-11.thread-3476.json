[
	{
		"id": 1395,
		"title": "XML format description for game editor",
		"author_id": 1485672,
		"author_name": "Malvineous",
		"timestamp": "2005-12-25T11:34:00.000Z",
		"content": "Hi all,<br /><br />You may remember I posted a while ago about the game editor I'm working on, and I mentioned that I was using XML to 'describe' the files used in the game so that this info didn't have to be hard coded.<br /><br />I've since decided to take this idea further, and attempt to describe actual game formats in XML.  This would mean that anyone who's ever used HTML and knows how a file format works, would be able to add support for that format to my editor - no programming necessary.<br /><br />Unfortunately it's a bit of a brain twister trying to figure out some XML tags to adequately describe most of the formats out there.  If anyone would like to add their thoughts to this, please do.  My current XML document looks like this (this is to describe a Duke3D .GRP file)<br />[pre] &lt;format type=\"container\"&gt;    &lt;!-- File header (used to identify correct format) ---    &lt;header&gt;        &lt;field id=\"cSig\" type=\"char\" value=\"KenSilverman\"&gt;Signature&lt;/field&gt;        &lt;field id=\"iNumFiles\" type=\"uint32le\"&gt;File count&lt;/field&gt;    &lt;/header&gt;    &lt;!-- File data ---    &lt;main&gt;        &lt;!-- File info ---        &lt;loop var=\"i\" count=\"@iNumFiles\"&gt;            &lt;fat index=\"$i\"&gt;                &lt;field id=\"cFilename\" type=\"char\" size=\"12\"&gt;Filename&lt;/field&gt;                &lt;field id=\"iSize\" type=\"uint32le\"&gt;File size&lt;/field&gt;            &lt;/fat&gt;        &lt;/loop&gt;        &lt;!-- Actual file data ---        &lt;loop var=\"i\" count=\"@iNumFiles\"&gt;            &lt;data index=\"$i\"&gt;                &lt;field id=\"cData\" type=\"binary\" size=\"@iSize[$i]\"&gt;File data&lt;/field&gt;            &lt;/data&gt;        &lt;/loop&gt;    &lt;/main&gt;&lt;/format&gt;[/pre]As you can see, there are a few issues with referring back to previous elements, and I think writing code to calculate the offsets for each element is going to be a nightmare - but if anyone has any thoughts or suggestions on the XML, do post [img]http://www.classicgaming.com/cc314/msgboard/emotikeen-smile.gif[/img]   My idea is to make the XML as nice as possible for people to use, and worry about the implementation later."
	},
	{
		"id": 29490,
		"title": "Re: XML format description for game editor",
		"author_id": 1486794,
		"author_name": "Br1ck",
		"timestamp": "2005-12-29T08:29:59.000Z",
		"content": "If only they'd done this type of stuff back then...  14 years ago! Gosh! That's a long time..."
	},
	{
		"id": 29491,
		"title": "Yes.",
		"author_id": 1485864,
		"author_name": "szevvy",
		"timestamp": "2006-01-02T08:31:45.000Z",
		"content": "How I'm hoping to do it:<br /><br />[pre]  game Duke Nukem 3Dfile *.grp&amp;nbsp &amp;nbsp &amp;nbsp &amp;nbsp packed    string 12 KenSilverman    unsigned32 fileCount        [fileCount] struct        string 12 fileName        unsigned32 fileSize    [all] data fileDatafile *.voc    sound vocfile *.mid    music midfile *.art    folder images #not completedfile *.map    folder levels[/pre]<br /><br />But yes, it is an absolute nightmare.  A lot of file formats don't conform to a nice, happy model and are a pain.  It's a pay-off between forcing people to read/write pseudocode in your XML, and extending the tags to do really specific, anal things.  In your case, parsing the indexes from the XML is going to the a bit of a grind, especially if you plan to let idots write the XML, and making sure your program doesn't keel over when someone throws rubbish at it.  The fact that you're using XML is good, as you don't have to worry about writing anything to parse the XML for you, although I've had no end of trouble getting the M$ XML parser to work.  I also had no end of trouble worknig out whether, say, in your case [pre]  &lt;field id=\"cFilename\" type=\"char\" size=\"12\"&gt;Filename&lt;/field&gt;[/pre] or [pre]  &lt;field id=\"cFilename\" type=\"char\" size=\"12\" name=\"Filename\" /&gt;[/pre] is better and more readable.<br /><br />My goal is for the program, when reading a file, to get to (in your case) the end of a loop, to see that it needs to return an offset and filesize.  It would then see that it has a filesize, and a calculated offset for the current file (header size + (number of files  * file record size) + sum off all previous file sizes)), and return that...but it's a long, twisty road.  Worth it in the end though, I think.<br /><br />edit: Things like \"palette is in a compressed exe, at a different offset for each of the 5 versions that exist\" will also be a challenge - simply because the aim is to write your XML as simply as possible, but still making it flexibly and powerful.  What I'd recommend you do (although you can ignore me completely, if you wish), is get the file formats for a nice selection of maybe 5 games - Commander Keen, Simcity 2K, Duke 3D, Secret Agent and say a nice easy one like Wacky Wheels, right, and write out the XML for each one.  Then, write out exactly what your program has to do, specific to each one - \"first, it has to know that this is a file where other files are.  It needs to know that it needs to read 12 characters, that it must compare to this string\".  Then, comparing it to your XML, write out how your program's going to know that - \"The char tag has a length string\", etc.  This way, you won't get halfway through loading files from game X and suddenly thing, \"oh, f**k - my program *can't* do this, because it would take a rewrite of the parser.<br /><br />At any rate, let me know if you need any file formats explained, or any help whatsoever."
	},
	{
		"id": 29492,
		"title": "Re: Yes.",
		"author_id": 1485672,
		"author_name": "Malvineous",
		"timestamp": "2006-01-08T06:29:01.000Z",
		"content": "<i>\"Things like \"palette is in a compressed exe, at a different offset for each of the 5 versions that exist\" will also be a challenge\"</i><br /><br />Yes, that's one of the things that prompted me to post my original message.  I'm currently doing it like a bit like this:<br />[pre] &lt;file id=\"idMainEXE\" name=\"keen5e.exe\" preprocess=\"unlzexe\"&gt;    &lt;header at=\"0x123\"&gt;v1.5&lt;/header&gt;    &lt;variable id=\"mhOffset\"&gt;0x12345&lt;/variable&gt;&lt;/file&gt;...&lt;file name=\"gamemaps.ck5\"&gt;    &lt;maphead file=\"@idMainEXE\" offset=\"@idMainEXE/@mhOffset\"/&gt;&lt;/file&gt;[/pre]<br />The idea being multiple \"idMainEXE\" definitions would only match one file on disk, and that's the one that would be referenced by any other files that need it.<br /><br /><i>\"The fact that you're using XML is good, as you don't have to worry about writing anything to parse the XML for you, although I've had no end of trouble getting the M$ XML parser to work.\"</i><br /><br />Yes, having written parsers like this before, I know just how annoying they can be - so not wishing to repeat that exercise I borrowed libxml which seems to work very nicely (not sure if it works under Windows though, but it'd better or my game editor never will either [img]http://www.classicgaming.com/cc314/msgboard/emotikeen-wink.gif[/img] )<br /><br />On the plus side, by using XML it means I can automatically convert the XML into HTML for a web page that nicely displays the layout of the file format thanks to XSLT.<br /><br /><i>\"My goal is for the program, when reading a file, to get to (in your case) the end of a loop, to see that it needs to return an offset and filesize. It would then see that it has a filesize, and a calculated offset for the current file (header size + (number of files * file record size) + sum off all previous file sizes)), and return that...but it's a long, twisty road. Worth it in the end though, I think.\"</i><br /><br />Yes, that's exactly what I want - the program should be able to infer the location of data even though the exact offsets won't be mentioned in the XML file.  But boy that can get complicated [img]http://www.classicgaming.com/cc314/msgboard/emotikeen-crazy.gif[/img]"
	}
]
